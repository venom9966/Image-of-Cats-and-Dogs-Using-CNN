# -*- coding: utf-8 -*-
"""Copy of CNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KNG-zxT3qJ_PDq85M0rkNPnYlF18uAxI
"""

!pip install opendatasets

import opendatasets as od
od.download("https://www.kaggle.com/datasets/salader/dogs-vs-cats")

train="/content/dogs-vs-cats/train"
test="/content/dogs-vs-cats/test"

# import lib
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# deep learning
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D,MaxPooling2D,Flatten,Dense,Dropout

# load training data
train_data=keras.utils.image_dataset_from_directory(
    directory=train,
    labels="inferred",     # folder name cats, dogs
    label_mode="int",      # 0,1
    batch_size=32,
    image_size=(256,256)   # resize
)

test_data=keras.utils.image_dataset_from_directory(
    directory=test,
    labels="inferred",     # folder name cats, dogs
    label_mode="int",      # 0,1
    batch_size=32,
    image_size=(256,256)   # resize
)

# normaliztion
def process(image,label):
  image=tf.cast(image/255.0,tf.float32)
  return image,label

train_data=train_data.map(process)
test_data=test_data.map(process)

# create model
model=Sequential() #layer by layer

# 1st processing
#conv2d : extract feature line edge pattern
model.add(Conv2D(32, kernel_size=(3,3), padding="valid", activation="relu", input_shape=(256,256,3)))
# maxpooling2d
model.add(MaxPooling2D(pool_size=(2,2), strides=2, padding="valid"))

# 2nd
#conv2d : extract feature line edge pattern
model.add(Conv2D(64, kernel_size=(3,3), padding="valid", activation="relu"))
# maxpooling2d
model.add(MaxPooling2D(pool_size=(2,2), strides=2, padding="valid"))

# 3rd
#conv2d : extract feature line edge pattern
model.add(Conv2D(128, kernel_size=(3,3), padding="valid", activation="relu"))
# maxpooling2d
model.add(MaxPooling2D(pool_size=(2,2), strides=2, padding="valid"))

# convert 2d to 1d
model.add(Flatten())

# dense layer with dropout
model.add(Dense(128, activation="relu"))
model.add(Dropout(0.1))
model.add(Dense(64, activation="relu"))
model.add(Dropout(0.1))
model.add(Dense(1, activation="sigmoid"))

model.compile(optimizer="adam", loss="binary_crossentropy", metrics=["accuracy"])

history=model.fit(train_data, epochs=3, validation_data=test_data)

history.history.keys()

# plot the accuracy train-test
plt.plot(history.history["accuracy"], color="red", label="train")
plt.plot(history.history["val_accuracy"], color="blue", label="test")
plt.legend()
plt.show()

plt.plot(history.history["loss"], color="red", label="train")
plt.plot(history.history["val_loss"], color="blue", label="test")
plt.legend()
plt.show()

# user input predict
img_path='/content/dogs-vs-cats/train/cats/cat.0.jpg'
img=keras.utils.load_img(img_path, target_size=(256,256))

#convert to array
img_array=keras.utils.img_to_array(img)

# normalize
img_array=img_array/255.0

# expand dims to convert to batch shape
img_array=np.expand_dims(img_array, axis=0)

prob=model.predict(img_array)[0][0]
print(f"Probability: {prob}")

Pred_class=1 if prob>0.5 else 0
print(f"Predicted class: {Pred_class}")

plt.imshow(img)
plt.axis('off')
plt.title(f'predicted class: {Pred_class}({"Dog" if Pred_class==1 else "Cat"})')
plt.show()

model.save("catvsdog.h5")

#streamlit